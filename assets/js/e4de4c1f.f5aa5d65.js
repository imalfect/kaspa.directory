"use strict";(self.webpackChunkkaspa_directory=self.webpackChunkkaspa_directory||[]).push([[286],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(k,o(o({ref:t},c),{},{components:r})):n.createElement(k,o({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7943:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={},o="Kaspa Graph Inspector",s={unversionedId:"kaspa-graph-inspector",id:"kaspa-graph-inspector",title:"Kaspa Graph Inspector",description:"Project Information",source:"@site/community-projects/kaspa-graph-inspector.md",sourceDirName:".",slug:"/kaspa-graph-inspector",permalink:"/community-projects/kaspa-graph-inspector",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"fundingPoolsSidebar",previous:{title:"Kaspa Chrome Extension",permalink:"/community-projects/kaspa-chrome-extension"},next:{title:"Kaspa Ledger Integration",permalink:"/community-projects/kaspa-ledger-integration"}},p={},l=[{value:"Project Information",id:"project-information",level:2},{value:"Links",id:"links",level:2},{value:"Project Description",id:"project-description",level:2},{value:"Screenshots",id:"screenshots",level:2}],c={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"kaspa-graph-inspector"},"Kaspa Graph Inspector"),(0,a.kt)("h2",{id:"project-information"},"Project Information"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Category: Utilities")),(0,a.kt)("h2",{id:"links"},"Links"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kgi.kaspad.net/"},"Webiste"))),(0,a.kt)("h2",{id:"project-description"},"Project Description"),(0,a.kt)("p",null,"Kaspa Graph Inspector - Displaying the Kaspa Network Block DAG in real time."),(0,a.kt)("p",null,"KGI comprises four components:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A postgres database"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("inlineCode",{parentName:"li"},"processing")," kaspa node (this is simply a kaspad wrapped in some extra logic)"),(0,a.kt)("li",{parentName:"ul"},"An ",(0,a.kt)("inlineCode",{parentName:"li"},"api")," REST server"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("inlineCode",{parentName:"li"},"web")," server")),(0,a.kt)("p",null,"How the components interact:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"processing")," node connects to the Kaspa network the same way a regular kaspad node does and starts syncing just as a kaspad node would"),(0,a.kt)("li",{parentName:"ul"},"While it's syncing, it writes metadata about every block to the postgres database"),(0,a.kt)("li",{parentName:"ul"},"From the other end, the ",(0,a.kt)("inlineCode",{parentName:"li"},"web")," server listens to http requests on some port"),(0,a.kt)("li",{parentName:"ul"},"When a user navigates their browser to that port, the ",(0,a.kt)("inlineCode",{parentName:"li"},"web")," server serves the KGI clientside logic, which includes the UI"),(0,a.kt)("li",{parentName:"ul"},"The clientside logic calls the ",(0,a.kt)("inlineCode",{parentName:"li"},"api")," REST server every so often"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"api")," REST server queries the postgres database and returns it to the clientside"),(0,a.kt)("li",{parentName:"ul"},"The clientside uses the response it received from the ",(0,a.kt)("inlineCode",{parentName:"li"},"api")," REST server to update the UI")),(0,a.kt)("h2",{id:"screenshots"},"Screenshots"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://media.discordapp.net/attachments/1138764714747363369/1178086182022815804/image.png?ex=6574dd41&is=65626841&hm=634520f251c2bfd481d45bf53da1c7ec0196531d7c8561d8269c08db19a6db74",alt:"One"})))}d.isMDXComponent=!0}}]);